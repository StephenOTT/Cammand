@using MainApp.Components.ProcessInstance
@using Camunda.Http.Api
@using Camunda.Http.Api.Model
@using BpmnJs.Components
@using Color = MudBlazor.Color

@inject AppData AppData

@page "/process-definitions/{definitionId}"

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h3" GutterBottom="true">Process Instances</MudText>
        </MudItem>
        
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>BPMN Diagram</CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Style="height: 500px">
                    @* Review why this is needed:*@
                    @if (_bpmnXml != null)
                    {
                        <BpmnViewer bpmnXml="@_bpmnXml"
                                    activityIncidentCounts="@_activityIncidentCounts"
                                    activeActivityCounts="@_activeActivityCounts">
                            <activityIncidentCountDisplay>
                                <MudBadge Color="Color.Error" Content="@context"/>
                            </activityIncidentCountDisplay>
                            <activeActivityCountDisplay>
                                <MudBadge Color="Color.Primary" Content="@context" />
                            </activeActivityCountDisplay>
                        </BpmnViewer>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>Process Instances for definition <code>@DefinitionId</code></CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <HistoricProcessInstanceDataGrid Camunda="@_camunda" ProcessDefinitionId="@DefinitionId"/>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {

    [Parameter]
    public string DefinitionId { get; set; }

    CamundaClient _camunda;

    private string _bpmnXml;

    private Dictionary<string, int> _activityIncidentCounts = new();

    private Dictionary<string, int> _activeActivityCounts = new();

    private List<ActivityStatisticsResultDto> _definitionStats;


    protected override async Task OnInitializedAsync()
    {
        _camunda = AppData.CamundaClient;

        _definitionStats = await GetDefinitionStats(DefinitionId);
        _activityIncidentCounts = _definitionStats
            .FindAll(i => i.Incidents.Count != 0)
            .GroupBy(i => i.Id)
            .Select(i => new
            {
                ActivityId = i.Key,
                Count = i.Sum(s => s.Incidents.Count)
            }).ToDictionary(k => k.ActivityId, v => v.Count);

        _activeActivityCounts = _definitionStats
            .FindAll(i => i.Instances > 0)
            .Select(i => new
            {
                ActivityId = i.Id,
                Count = i.Instances
            }).ToDictionary(k => k.ActivityId, v => v.Count);

        _bpmnXml = await GetBpmnXml(DefinitionId);

        StateHasChanged();
    }

    private async Task<string> GetBpmnXml(string processDefinitionId)
    {
        var result = await _camunda.Api.ProcessDefinitionApi.GetProcessDefinitionBpmn20XmlAsync(processDefinitionId);
        return result.Bpmn20Xml;
    }

    private async Task<List<ActivityStatisticsResultDto>> GetDefinitionStats(string processDefinitionId)
    {
        return await _camunda.Api.ProcessDefinitionApi.GetActivityStatisticsAsync(
            id: processDefinitionId,
            incidents: true);
    }

}