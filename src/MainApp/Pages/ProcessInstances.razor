@using Blazor.Bpmn.Components
@using MainApp.Components.ProcessInstance
@using Camunda.Http.Api
@using Camunda.Http.Api.Model
@using Blazor.Bpmn-Bpmn.Components
@using Color = MudBlazor.Color
@using _Imports = MudBlazor._Imports

@inject AppData AppData

@page "/process-definitions/{definitionId}"

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h3" GutterBottom="true">Process Instances</MudText>
        </MudItem>
        
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>BPMN Diagram</CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton OnClick="@(() => _viewer.HideOverlays(new []{"incident"}))" Icon="@Icons.Material.Outlined.Warning" Title="Incidents"/>
                        <MudIconButton OnClick="@(() => _viewer.ShowOverlays(new []{"incident"}))" Icon="@Icons.Material.Outlined.Check" Title="Incidents"/>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Style="height: 500px">
                    @if (_bpmnXml != null)
                                        {
                                            <BpmnViewer 
                                                @ref="@_viewer"
                                                Xml="@_bpmnXml"
                                                OverlayConfigs="@_overlayConfigs"
                                            >
                                            </BpmnViewer>
                                        }
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>Process Instances for definition <code>@DefinitionId</code></CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <HistoricProcessInstancesTable Camunda="@_camunda" ProcessDefinitionId="@DefinitionId"/>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {

    private BpmnViewer _viewer;
    
    [Parameter]
    public string DefinitionId { get; set; }

    CamundaClient _camunda;

    private string _bpmnXml;

    private Dictionary<string, int> _activityIncidentCounts = new();

    private Dictionary<string, int> _activeActivityCounts = new();

    private List<ActivityStatisticsResultDto> _definitionStats;

    List<OverlayConfig> _overlayConfigs = new();

    Dictionary<string, int> _heatmapData = new();

    protected override void OnInitialized()
    {
        _camunda = AppData.CamundaClient;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _definitionStats = await GetDefinitionStats(DefinitionId);
  
            var incidentOverlays = _definitionStats
                .FindAll(i => i.Incidents.Count != 0)
                .GroupBy(i => i.Id)
                .Select(i => new OverlayConfig(i.Key, element =>
                {
                    return new OverlayConfig(
                        elementId:i.Key,
                        overlayRenderFragment: _ => @<MudBadge Color="Color.Error" Content="@i.Sum(s => s.Incidents.Count)"/>,
                        positionBottom: 15,
                        positionLeft: 2,
                        tags: new List<string> {"incident"}
                        );
                }));
            
            _overlayConfigs.AddRange(incidentOverlays);

            
            var activeActivityOverlays = _definitionStats
                .FindAll(i => i.Instances > 0)
                .Select(i => new
                {
                    ActivityId = i.Id,
                    Count = i.Instances
                })
                .Select(i => new OverlayConfig(i.ActivityId, element =>
                {
                    return new OverlayConfig(
                        elementId:i.ActivityId,
                        overlayRenderFragment: _ => @<MudBadge Color="Color.Info" Content="i.Count"/>,
                        positionBottom: 15,
                        positionRight: 15,
                        tags: new List<string> {"activeActivity"}
                        );
                }));
            
            _overlayConfigs.AddRange(activeActivityOverlays);
            
            _bpmnXml = await GetBpmnXml(DefinitionId);
            StateHasChanged();
        }
    }

    private async Task<string> GetBpmnXml(string processDefinitionId)
    {
        var result = await _camunda.Api.ProcessDefinitionApi.GetProcessDefinitionBpmn20XmlAsync(processDefinitionId);
        return result.Bpmn20Xml;
    }

    private async Task<List<ActivityStatisticsResultDto>> GetDefinitionStats(string processDefinitionId)
    {
        return await _camunda.Api.ProcessDefinitionApi.GetActivityStatisticsAsync(
            id: processDefinitionId,
            incidents: true);
    }

}