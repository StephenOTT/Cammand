@page "/forms/builder"
@using System.Text.Json
@using Formio.Components
@using Color = MudBlazor.Color
@inject IJSRuntime _jsRuntime

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Form Builder</MudText>
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        Builder
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>

                    <InputFile id="loadInput" OnChange="OpenBuilderSchema" hidden/>

                    <MudFab HtmlTag="label"
                            Color="Color.Secondary"
                            Icon="@Icons.Filled.FileUpload"
                            Label="Load Json Schema"
                            for="loadInput"/>

                </MudCardContent>
                <MudCardContent>
                    
                    <MudRadioGroup T="string" SelectedOption="@_selectedDisplayMode" SelectedOptionChanged="@OnSelectedDisplayModeChanged">
                        <MudRadio Option="@("form")">Form</MudRadio>
                        <MudRadio Option="@("wizard")">Wizard</MudRadio>
                    </MudRadioGroup>

                </MudCardContent>
                <MudCardContent>
                    
                    <FormioBuilder @ref="@_builder"
                                   OnBuilderChange="@HandleBuilderChangeEvent"
                                   FormSchema="@_builderSchema">
                    </FormioBuilder>
                    
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        Builder Schema
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField T="string" Lines="10" Text="@_builderSchemaText" Variant="Variant.Filled" Disabled="true"/>
                </MudCardContent>
                <MudCardContent>
                    
                    <MudButton OnClick="@(() => DownloadJson(_fileName, _builderSchemaText))" Variant="Variant.Filled" Color="Color.Secondary" Disabled="@(_builderSchemaText == null)">Download Schema</MudButton>
                    
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        Form Viewer
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    @* Update to manual so we are not constantly refreshing the form on every builder change *@
                    <MudButton OnClick="@UpdateViewerSchema" Variant="Variant.Filled" Color="Color.Secondary" Disabled="@(_builderSchemaText == null)">Load Form from Builder</MudButton>
                    
                </MudCardContent>
                <MudCardContent>
                    
                    @if (_viewerSchema != null) 
                    {
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>Form</CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <FormioViewer @ref="@_viewer" @bind-FormSchema="@_viewerSchema" OnFormSubmit="@HandleFormSubmission"></FormioViewer>
                            </MudCardContent>
                        </MudCard>
                    }

                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        Form Submission
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField T="string" Lines="10" Text="@_formSubmissionText" Variant="Variant.Filled" Disabled="true"/>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {

    FormSchema _builderSchema;
    string _builderSchemaText;

    object _formSubmission;
    string _formSubmissionText;

    FormSchema _viewerSchema;

    string _selectedDisplayMode = "form";

    private FormioBuilder _builder;
    private FormioViewer _viewer;

    string _fileName = "form_schema.json";

    IJSObjectReference _interopHelpers;

    IBrowserFile file;

    protected override async Task OnInitializedAsync()
    {
        _builderSchema = new FormSchema
        {
            Display = _selectedDisplayMode
        };

        _interopHelpers = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/interop-helpers.js");
    }

    async Task OnSelectedDisplayModeChanged(string value)
    {
        _selectedDisplayMode = value;
        _builderSchema.Display = value;
        _builderSchemaText = JsonSerializer.Serialize(_builderSchema, new JsonSerializerOptions {WriteIndented = true});
        await _builder.RebuildForm();
    }


    void HandleBuilderChangeEvent(FormSchema schema)
    {
        _builderSchema = schema;
        _builderSchemaText = JsonSerializer.Serialize(schema, new JsonSerializerOptions {WriteIndented = true});
    }

    void HandleFormSubmission(object submission)
    {
        _formSubmission = submission;
        _formSubmissionText = JsonSerializer.Serialize(submission, new JsonSerializerOptions {WriteIndented = true});
    }

    async Task UpdateViewerSchema()
    {
        _viewerSchema = JsonSerializer.Deserialize<FormSchema>(_builderSchemaText);
        if (_viewer != null)
        {
            await _viewer.RebuildForm();
        }
    }

    private async void DownloadJson(string fileName, string content)
    {
        await _interopHelpers.InvokeAsync<object>("saveFile", fileName, content);
    }

    async Task OpenBuilderSchema(InputFileChangeEventArgs e)
    {
        file = e.File;
        _builderSchema = await JsonSerializer.DeserializeAsync<FormSchema>(file.OpenReadStream());
        HandleBuilderChangeEvent(_builderSchema);
        StateHasChanged(); //@TODO review why this is needed before the rebuild...  Integrate changes into the builder code.
        await _builder.RebuildForm();
    }

}