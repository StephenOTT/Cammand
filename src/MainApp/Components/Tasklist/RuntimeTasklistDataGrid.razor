@using Camunda.Http.Api.Model
@using Camunda.Http.Api
@using Camunda.Http.Api.Api
@using MainApp.Components.UserTask
@using MainApp.Components.IdentityLink
@using System.IO
@inject AppData AppData

<Card>
    <CardBody>
        <Button Color="Color.Primary" Clicked="@OnCreateClicked">Create Custom Task</Button>
    </CardBody>
</Card>

<DataGrid TItem="TaskDto"
          @ref="@_taskDataGrid"
          Data="@_userTasks"
          ReadData="@OnReadData"
          ShowPager="true"
          TotalItems="@_totalUserTasks"
          PageSize="@PageSize"
          @bind-SelectedRow="@_selectedUserTask"
          DetailRowTrigger="@((ut) => ut.Id == _selectedUserTask?.Id && shouldOpenRow(ut))">
    <EmptyTemplate>
        <div class="box">
            No variable instances found!
        </div>
    </EmptyTemplate>

    <LoadingTemplate>
        <div class="box">
            Loading...
        </div>
    </LoadingTemplate>
    <ChildContent>
        <DataGridColumn TItem="TaskDto" Field="@nameof(TaskDto.Name)" Caption="Title"/>
        <DataGridColumn TItem="TaskDto" Field="@nameof(TaskDto.Assignee)" Caption="Assignee"/>
        <DataGridColumn TItem="TaskDto" Field="@nameof(TaskDto.TenantId)" Caption="Tenant"/>
        <DataGridColumn TItem="TaskDto" Field="@nameof(TaskDto.Created)" Caption="Created At"/>
    </ChildContent>
    <DetailRowTemplate>
        <Card>
            <CardBody>

                <Buttons Role="ButtonsRole.Toolbar">
                    <Buttons Margin="Margin.Is2.FromRight">
                        <TaskButton UserTask="@context"
                                    Clicked="@OnClaimClicked"
                                    Color="@Color.Primary"
                                    DisabledTrigger="@(t => t.Assignee != null)">
                            Claim
                        </TaskButton>
                        <TaskButton UserTask="@context"
                                    Clicked="@OnUnClaimClicked"
                                    Color="@Color.Primary"
                                    DisabledTrigger="@(t => t.Assignee != AppData.EngineUsername)">
                            Un-Claim
                        </TaskButton>
                    </Buttons>
                    <Buttons>
                        <Button Color="Color.Secondary" Clicked="@OnSetAssigneeClicked">Set Assignee</Button>
                        <Button Color="Color.Secondary" Clicked="@OnDelegateClicked">Delegate</Button>
                        <Button Color="Color.Secondary" Clicked="@OnResolveClicked">Resolve</Button>
                    </Buttons>
                    <Buttons Margin="Margin.Is2.OnX">
                        <Button Color="Color.Light" Clicked="@OnAddCommentClicked">Comment</Button>
                        <Button Color="Color.Light" Clicked="@OnAddAttachmentClicked">Add Attachment</Button>
                    </Buttons>
                    <Buttons Margin="Margin.Is2.OnX">
                        <Button Color="Color.Danger" Clicked="@OnDelegateClicked">Delete</Button>
                    </Buttons>
                </Buttons>
            </CardBody>
        </Card>

        <Card>
            <CardBody>
                <Container>
                    <Row>
                        <Column>
                            <Paragraph>StartTime @context.Created</Paragraph>
                        </Column>
                    </Row>
                    <Row>
                        <Column>
                            <Paragraph>Due Date @context.Due</Paragraph>
                        </Column>
                        <Column>
                            <Paragraph>Tenant @context.TenantId</Paragraph>
                        </Column>
                    </Row>
                    <Row>
                        <Column>
                            <Paragraph>Task Description @context.Description</Paragraph>
                        </Column>
                    </Row>
                    
                        <Row>
                            <Column>
                                <Card>
                                    <CardBody>
                                        <UserTaskIdentityLinks Camunda="@Camunda" UserTaskId="@context.Id"/>
                                    </CardBody>
                                </Card>
                            </Column>
                        </Row>

                        <Row>
                            <Column>
                                <UserTaskFormData Camunda="@Camunda" UserTaskId="@context.Id"></UserTaskFormData>
                            </Column>
                        </Row>

                </Container>
            </CardBody>
        </Card>
    </DetailRowTemplate>
</DataGrid>


@code {

    [Parameter]
    public CamundaClient Camunda { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 25;

    private DataGrid<TaskDto> _taskDataGrid;

    private List<TaskDto> _userTasks;
    private int _totalUserTasks;

    private TaskDto _selectedUserTask;

    private bool shouldOpenRow(TaskDto task)
    {
        Console.WriteLine(task.Id);
        Console.WriteLine(_selectedUserTask?.Id);
        if (task.Id == _selectedUserTask?.Id)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    private async Task ReloadDataGrid(bool resetPage = false)
    {
        if (resetPage)
        {
            _taskDataGrid.CurrentPage = 1;
        }
        await _taskDataGrid.Reload();
    }

    async Task OnReadData(DataGridReadDataEventArgs<TaskDto> e)
    {
        var query = new TaskQueryDto()
        {
            Sorting = new List<TaskQueryDtoSorting>()
            {
                new()
                {
                    SortBy = TaskQueryDtoSorting.SortByEnum.Created,
                    SortOrder = TaskQueryDtoSorting.SortOrderEnum.Desc
                }
            }
        };

        var totalQuery = new TaskQueryDto()
        {
        };

        _userTasks = await Camunda.Api.TaskApi.QueryTasksAsync(e.PageSize * (e.Page - 1), e.PageSize, query);

        _totalUserTasks = Convert.ToInt32((await Camunda.Api.TaskApi.QueryTasksCountAsync(totalQuery)).Count);

        StateHasChanged();
    }

    // private async Task<List<IdentityLinkDto>> GetUserTaskIdentityLinks(string userTaskId)
    // {
    //     return await Camunda.Api.TaskIdentityLinkApi.GetIdentityLinksAsync(userTaskId);
    // }

    ///
    /// does a check on server to see if task is currently assigned.
    /// 
    private async Task ClaimUserTask(string userTaskId, string assigneeUserId)
    {
        try
        {
            await Camunda.Api.TaskApi.ClaimAsync(userTaskId, new UserIdDto(assigneeUserId));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task UnClaimUserTask(string userTaskId)
    {
        try
        {
            await Camunda.Api.TaskApi.UnclaimAsync(userTaskId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    ///
    /// does NOT check on server to see if task is currently assigned.
    /// 
    private async Task SetAssigneeUserTask(string userTaskId, string assigneeUserId)
    {
        try
        {
            await Camunda.Api.TaskApi.SetAssigneeAsync(userTaskId, new UserIdDto(assigneeUserId));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task DelegateUserTask(string userTaskId, string delegateUserId)
    {
        try
        {
            await Camunda.Api.TaskApi.DelegateTaskAsync(userTaskId, new UserIdDto(delegateUserId));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task AddCommentToUserTask(string userTaskId, string comment)
    {
        try
        {
            await Camunda.Api.TaskCommentApi.CreateCommentAsync(userTaskId, new CommentDto {Message = comment});
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task AddAttachmentToUserTask(string userTaskId, string attachmentName, string attachmentDescription, string attachmentType, string attachmentUrl, Stream attachmentContent)
    {
        try
        {
    //@TODO review if this actually works... The API says the content param is text/plain, but the openapi config set it as stream.    
            await Camunda.Api.TaskAttachmentApi.AddAttachmentAsync(userTaskId, attachmentName, attachmentDescription, attachmentType, attachmentUrl, attachmentContent);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    ///
    /// Deletion of a task cannot occur if part of a running task.
    /// 
    private async Task DeleteUserTask(string userTaskId)
    {
        try
        {
            await Camunda.Api.TaskApi.DeleteTaskAsync(userTaskId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task CreateUserTask(TaskDto task)
    {
        try
        {
            await Camunda.Api.TaskApi.CreateTaskAsync(task);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }


    private async void OnClaimClicked()
    {
        var currentUser = AppData.EngineUsername;
        await ClaimUserTask(_selectedUserTask.Id, currentUser);
        await ReloadDataGrid();
    }

    private void OnSetAssigneeClicked()
    {
    }

    private async void OnUnClaimClicked()
    {
        await UnClaimUserTask(_selectedUserTask.Id);
        await ReloadDataGrid();
    }

    private async void OnDelegateClicked()
    {
        await DeleteUserTask(_selectedUserTask.Id);
    }

    private void OnResolveClicked()
    {
    }

    private void OnAddCommentClicked()
    {
    }

    private void OnAddAttachmentClicked()
    {
    }

    private async void OnDeleteClicked()
    {
        await DeleteUserTask(_selectedUserTask.Id);
    }

    private void OnCreateClicked()
    {
    }




}