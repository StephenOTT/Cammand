@using Color = MudBlazor.Color
@inject AppData AppData


<MudCard>
    <MudCardHeader>
        <CardHeaderContent>App Settings</CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.body1">Configure client side App settings. Settings are lost upon close of browser tab.</MudText>
        <MudText Typo="Typo.body1">Leave username and password blank if you do not want to use authentication.</MudText>
    </MudCardContent>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12">
                
                <MudForm>
                    <MudTextField T="string" Label="Engine Url" Immediate="true" Placeholder="Camunda API URL" Text="@AppData.EngineUrl" TextChanged="@EngineUrlChange" DebounceInterval="900" Required="true"/>
                    <MudTextField T="string" Label="Username" Immediate="true" AutoFocus="true" Placeholder="username" Text="@AppData.EngineUsername" TextChanged="@UserNameCredentialChange" DebounceInterval="900"/>
                    <MudTextField T="string" Label="Password" Immediate="true" InputType="InputType.Password" Placeholder="Password" Text="@AppData.EnginePassword" TextChanged="@PasswordCredentialChange" DebounceInterval="900"/>
                </MudForm>

            </MudItem>
            <MudItem xs="12">
                
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="TestConnection">Test Connection</MudButton>
                
            </MudItem>
        </MudGrid>


    </MudCardContent>
</MudCard>


@code {

    void EngineUrlChange(string value)
    {
        AppData.EngineUrl = value;
        AppData.CreateClient();
    }
    
    void UserNameCredentialChange(string value)
    {
        AppData.EngineUsername = value;
        AppData.CreateClient();
    }

    void PasswordCredentialChange(string value)
    {
        AppData.EnginePassword = value;
        AppData.CreateClient();
    }

    async void TestConnection()
    {
        try
        {
            await AppData.CamundaClient.Api.UserApi.GetUserCountAsync(id: AppData.EngineUsername);
            Console.WriteLine($"Success: Connected as {AppData.EngineUsername}");
        }
        catch (Exception e)
        {
            Console.Error.WriteLine(e);
            throw e;
        }
    }

}