@using Camunda.Http.Api
@using Camunda.Http.Api.Model

<MudTable
    T="HistoricTaskInstanceDto"
    ServerData="@(new Func<TableState, Task<TableData<HistoricTaskInstanceDto>>>(GetDataFromServer))"
    Hover="false"
    RowsPerPage="PageSize"
    @bind-Loading="@_isLoading"
    Elevation="0">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Assignee</MudTh>
        <MudTh>Start Time</MudTh>
        <MudTh>End Time</MudTh>
        <MudTh>Due</MudTh>
        <MudTh>Priority</MudTh>
        <MudTh>Duration</MudTh>
        <MudTh>Task Definition Key</MudTh>
        <MudTh>Task Instance Id</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Assignee">@context.Assignee</MudTd>
        <MudTd DataLabel="Start Time">@context.StartTime</MudTd>
        <MudTd DataLabel="End Time">@context.EndTime</MudTd>
        <MudTd DataLabel="Due">@context.Due</MudTd>
        <MudTd DataLabel="Priority">@context.Priority</MudTd>
        <MudTd DataLabel="Duration">@context.Duration</MudTd>
        <MudTd DataLabel="Task Definition Key">@context.TaskDefinitionKey</MudTd>
        <MudTd DataLabel="Task Instance Id">@context.Id</MudTd>

    </RowTemplate>
    
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>




@code {

    [Parameter]
    public CamundaClient Camunda { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 10;

    [Parameter]
    public string ProcessInstanceId { get; set; }

    private List<HistoricTaskInstanceDto> _userTasks;

    private int _totalUserTasks;
    
    bool _isLoading;

    
    async Task<TableData<HistoricTaskInstanceDto>> GetDataFromServer(TableState state)
    {
        _isLoading = true;
        StateHasChanged();
        
        var query = new HistoricTaskInstanceQueryDto
        {
            ProcessInstanceId = ProcessInstanceId,
            Sorting = new List<HistoricTaskInstanceQueryDtoSorting>
            {
                new()
                {
                    SortBy = HistoricTaskInstanceQueryDtoSorting.SortByEnum.StartTime,
                    SortOrder = HistoricTaskInstanceQueryDtoSorting.SortOrderEnum.Desc
                }
            }
        };

        var totalQuery = new HistoricTaskInstanceQueryDto
        {
            ProcessInstanceId = ProcessInstanceId
        };

        _userTasks = await Camunda.Api.HistoricTaskInstanceApi.QueryHistoricTaskInstancesAsync(state.PageSize * (state.Page), state.PageSize, query);

        _totalUserTasks = Convert.ToInt32((await Camunda.Api.HistoricTaskInstanceApi.QueryHistoricTaskInstancesCountAsync(totalQuery)).Count);
        
        
        _isLoading = false;
        StateHasChanged();

        return new TableData<HistoricTaskInstanceDto>
        {
            Items = _userTasks,
            TotalItems = _totalUserTasks,
        };
    }
}
