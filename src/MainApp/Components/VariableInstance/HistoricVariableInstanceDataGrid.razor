@using Camunda.Http.Api
@using Camunda.Http.Api.Model


<MudTable
    T="HistoricVariableInstanceDto"
    ServerData="@(new Func<TableState, Task<TableData<HistoricVariableInstanceDto>>>(GetDataFromServer))"
    Hover="false"
    RowsPerPage="PageSize"
    @bind-Loading="@_isLoading"
    Elevation="0">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Value</MudTh>
        <MudTh>Create Time</MudTh>
        <MudTh>State</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Type">@context.Type</MudTd>
        <MudTd DataLabel="Value">@context.Value</MudTd>
        <MudTd DataLabel="Value">@context.CreateTime</MudTd>
        <MudTd DataLabel="Value">@context.State</MudTd>
    </RowTemplate>
    
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>


@code {

    [Parameter]
    public CamundaClient Camunda { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 10;

    [Parameter]
    public string ProcessInstanceId { get; set; }

    private List<HistoricVariableInstanceDto> _instances;
    
    private int _totalInstances;

    bool _isLoading;

    
    async Task<TableData<HistoricVariableInstanceDto>> GetDataFromServer(TableState state)
    {
        _isLoading = true;
        StateHasChanged();
        
        var query = new HistoricVariableInstanceQueryDto()
        {
            ProcessInstanceId = ProcessInstanceId,
            Sorting = new List<HistoricVariableInstanceQueryDtoSorting>
            {
                new(HistoricVariableInstanceQueryDtoSorting.SortByEnum.VariableName, HistoricVariableInstanceQueryDtoSorting.SortOrderEnum.Asc)
            }
        };
        
        _instances = await Camunda.Api.HistoricVariableInstanceApi.QueryHistoricVariableInstancesAsync(state.PageSize * (state.Page ), state.PageSize, false, query);

        _totalInstances = Convert.ToInt32((await Camunda.Api.HistoricVariableInstanceApi.QueryHistoricVariableInstancesCountAsync(query)).Count);
        
        _isLoading = false;
        StateHasChanged();

        return new TableData<HistoricVariableInstanceDto>
        {
            TotalItems = _totalInstances,
            Items = _instances
        };
    }
}
