@using Camunda.Http
@using Camunda.Http.Api
@using Camunda.Http.Api.Model
@using Margin = Blazorise.Margin
@inject AppData AppData

<Container>
    <Row>
        <Column>
            <DataGrid TItem="DeploymentDto"
                      Data="@deployments"
                      ReadData="@OnReadData"
                      @bind-SelectedRow="@selectedDeployment"
                      DetailRowTrigger="@((item)=>item.Id == selectedDeployment?.Id)"
                      ShowPager="true"
                      TotalItems="@totalDeployments"
                      PageSize="@pageSize"
                      Sortable="false">
                <EmptyTemplate>
                    <div class="box">
                        No deployments found!
                    </div>
                </EmptyTemplate>

                <LoadingTemplate>
                    <div class="box">
                        Loading...
                    </div>
                </LoadingTemplate>

                <ChildContent>
                    <DataGridColumn TItem="DeploymentDto" Field="@nameof(DeploymentDto.Id)" Caption="Id" />
                    <DataGridColumn TItem="DeploymentDto" Field="@nameof(DeploymentDto.Name)" Caption="Name" />
                    <DataGridColumn TItem="DeploymentDto" Field="@nameof(DeploymentDto.TenantId)" Caption="Tenant" />
                    <DataGridColumn TItem="DeploymentDto" Field="@nameof(DeploymentDto.DeploymentTime)" Caption="Deployment Time" />
                    <DataGridColumn TItem="DeploymentDto" Field="@nameof(DeploymentDto.Source)" Caption="Source" />
                </ChildContent>

                <DetailRowTemplate>
                    <Card Margin="Margin.Is4.OnY">
                        <CardHeader>
                            <CardTitle>Deployment Resources</CardTitle>
                        </CardHeader>
                        <CardBody>
                            <DataGrid TItem="DeploymentResourceDto"
                                      Data="@ResourcesForSelectedDeployment"
                                      ReadData="@DeploymentResourcesOnReadData" 
                                      ShowPager="true" 
                                      TotalItems="@totalResourcesForSelectedDeployment" 
                                      PageSize="@deploymentResourcesPageSize" 
                                      Sortable="false">
                                <ChildContent>
                                    <DataGridColumn TItem="DeploymentResourceDto" Field="@nameof(DeploymentResourceDto.Name)" Caption="Name" />
                                    <DataGridColumn TItem="DeploymentResourceDto" Field="@nameof(DeploymentResourceDto.Id)" Caption="Id" />
                                </ChildContent>
                            </DataGrid>
                        </CardBody>
                    </Card>

                </DetailRowTemplate>

            </DataGrid>
        </Column>
    </Row>
</Container>




@code {

    [Parameter]
    public CamundaClient camunda { get; set; }

    [Parameter]
    public int pageSize { get; set; } = 50;

    [Parameter]
    public int deploymentResourcesPageSize { get; set; } = 10;

    private List<DeploymentDto> deployments;
    private int totalDeployments;

    private List<DeploymentResourceDto> ResourcesForSelectedDeployment;
    private int totalResourcesForSelectedDeployment;

    private DeploymentDto selectedDeployment;


    async Task OnReadData(DataGridReadDataEventArgs<DeploymentDto> e)
    {

        try
        {
         
                deployments = await camunda.Api.DeploymentApi.GetDeploymentsAsync(
                    sortBy: "deploymentTime",
                    sortOrder: "desc",
                    firstResult: e.PageSize * (e.Page - 1),
                    maxResults: e.PageSize);
            
            totalDeployments = Convert.ToInt32((await camunda.Api.DeploymentApi.GetDeploymentsCountAsync()).Count);

            StateHasChanged();

        }
        catch (Exception exception)
        {
            Console.WriteLine(exception);
            AppData.PushToSnackBar(exception.Message, SnackbarColor.Danger);
        }

    }

    async Task DeploymentResourcesOnReadData(DataGridReadDataEventArgs<DeploymentResourceDto> e)
    {
        ResourcesForSelectedDeployment = await camunda.Api.DeploymentApi.GetDeploymentResourcesAsync(selectedDeployment.Id);

        totalResourcesForSelectedDeployment = ResourcesForSelectedDeployment.Count();

        StateHasChanged();
    }
}
