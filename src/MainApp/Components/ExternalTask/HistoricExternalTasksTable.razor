@using Camunda.Http.Api.Model
@using Camunda.Http.Api

<MudTable
    T="HistoricExternalTaskLogDto"
    ServerData="@(new Func<TableState, Task<TableData<HistoricExternalTaskLogDto>>>(GetDataFromServer))"
    Hover="false"
    RowsPerPage="PageSize"
    @bind-Loading="@_isLoading"
    Elevation="0">
    <HeaderContent>
        <MudTh>Log Id</MudTh>
        <MudTh>Log Type</MudTh>
        <MudTh>Topic Name</MudTh>
        <MudTh>Worker Id</MudTh>
        <MudTh>Activity Instance Id</MudTh>
        <MudTh>External Task Id</MudTh>
        <MudTh>External Task Priority</MudTh>
        <MudTh>Error Message</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Log Id">@context.Id</MudTd>
        <MudTd DataLabel="Log Type">@LogTypeText(context)</MudTd>
        <MudTd DataLabel="Topic Name">@context.TopicName</MudTd>
        <MudTd DataLabel="Worker Id">@context.WorkerId</MudTd>
        <MudTd DataLabel="Activity Instance Id">@context.ActivityInstanceId</MudTd>
        <MudTd DataLabel="External Task Id">@context.ExternalTaskId</MudTd>
        <MudTd DataLabel="External Task Priority">@context.Priority</MudTd>
        <MudTd DataLabel="Error Message">@context.ErrorMessage</MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>


@code {

    [Parameter]
    public CamundaClient Camunda { get; set; }
    
    [Parameter]
    public int PageSize { get; set; } = 25;

    [Parameter]
    public string ProcessInstanceId { get; set; }

    private List<HistoricExternalTaskLogDto> _externalTasks;

    private int _totalExternalTasks;
    
    bool _isLoading;
    

    async Task<TableData<HistoricExternalTaskLogDto>> GetDataFromServer(TableState state)
    {
        _isLoading = true;
        StateHasChanged();

        var query = new HistoricExternalTaskLogQueryDto()
        {
            ProcessInstanceId = ProcessInstanceId,
            Sorting = new List<HistoricExternalTaskLogQueryDtoSorting>()
            {
                new()
                {
                    SortBy = HistoricExternalTaskLogQueryDtoSorting.SortByEnum.Timestamp,
                    SortOrder = HistoricExternalTaskLogQueryDtoSorting.SortOrderEnum.Desc
                }
            }
        };

        var totalQuery = new HistoricExternalTaskLogQueryDto()
        {
            ProcessInstanceId = ProcessInstanceId
        };

        _externalTasks = await Camunda.Api.HistoricExternalTaskLogApi.QueryHistoricExternalTaskLogsAsync(query);

        _totalExternalTasks = Convert.ToInt32((await Camunda.Api.HistoricExternalTaskLogApi.QueryHistoricExternalTaskLogsCountAsync(totalQuery)).Count);

        _isLoading = false;
        StateHasChanged();

        return new TableData<HistoricExternalTaskLogDto>
        {
            Items = _externalTasks,
            TotalItems = _totalExternalTasks,
        };
    }

    private string LogTypeText(HistoricExternalTaskLogDto log)
    {
        if (log.CreationLog == true)
        {
            return "Creation";
        }
        if (log.DeletionLog == true)
        {
            return "Deletion";
        }
        if (log.FailureLog == true)
        {
            return "Failure";
        }
        if (log.SuccessLog == true)
        {
            return "Success";
        }
        Console.Error.WriteLine("Unknown Historic External Task Log DTO Log type: " + log.ToJson());
        return "?";
    }
}
