@using Camunda.Http.Api.Model
@using Camunda.Http.Api

<MudTable
    T="ExternalTaskDto"
    ServerData="@(new Func<TableState, Task<TableData<ExternalTaskDto>>>(GetDataFromServer))"
    Hover="false"
    RowsPerPage="PageSize"
    @bind-Loading="@_isLoading"
    Elevation="0">
    <HeaderContent>
        <MudTh>State</MudTh>
        <MudTh>Id</MudTh>
        <MudTh>Priority</MudTh>
        <MudTh>Topic Name</MudTh>
        <MudTh>Worker Id</MudTh>
        <MudTh>Lock Expiration Date</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="State">
            @if (context.Suspended == true)
            {
                <MudText>Suspended</MudText>
            }
            else
            {
                <MudText>Active</MudText>
            }
        </MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Priority">@context.Priority</MudTd>
        <MudTd DataLabel="Topic Name">@context.TopicName</MudTd>
        <MudTd DataLabel="Worker Id">@context.WorkerId</MudTd>
        <MudTd DataLabel="Lock Expiration Date">@context.LockExpirationTime</MudTd>
    </RowTemplate>
    
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>


@code {

    [Parameter]
    public CamundaClient Camunda { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 10;

    [Parameter]
    public string ProcessInstanceId { get; set; }

    private List<ExternalTaskDto> _externalTasks;

    private int _totalExternalTasks;
    
    bool _isLoading;

    async Task<TableData<ExternalTaskDto>> GetDataFromServer(TableState state)
    {
        _isLoading = true;
        StateHasChanged();
        
        var query = new ExternalTaskQueryDto()
        {
            ProcessInstanceId = ProcessInstanceId,
            Sorting = new List<ExternalTaskQueryDtoSorting>()
            {
                new()
                {
                    SortBy = ExternalTaskQueryDtoSorting.SortByEnum.LockExpirationTime,
                    SortOrder = ExternalTaskQueryDtoSorting.SortOrderEnum.Desc
                }
            }
        };

        var totalQuery = new ExternalTaskQueryDto()
        {
            ProcessInstanceId = ProcessInstanceId
        };

        _externalTasks = await Camunda.Api.ExternalTaskApi.QueryExternalTasksAsync(state.PageSize * (state.Page), state.PageSize, query);

        _totalExternalTasks = Convert.ToInt32((await Camunda.Api.ExternalTaskApi.QueryExternalTasksCountAsync(totalQuery)).Count);

        _isLoading = false;
        StateHasChanged();

        return new TableData<ExternalTaskDto>
        {
            Items = _externalTasks,
            TotalItems = _totalExternalTasks,
        };
    }
}
