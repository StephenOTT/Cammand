@inject IJSRuntime JS
@implements IAsyncDisposable

<div @ref="@formioElement"></div>


@code
{
    ElementReference formioElement;
    IJSObjectReference FormioModule;
    IJSObjectReference FormInstance;

    [Parameter]
    public FormSchema FormSchema { get; set; } = null;

    [Parameter]
    public EventCallback<FormSchema> FormSchemaChanged { get; set; }

    [Parameter]
    public RenderFragment NoSchemaDisplay { get; set; }

    [Parameter]
    public object FormOptions { get; set; } = null;

    [Parameter]
    public object FormDefaultData { get; set; } = null;
    
    [Parameter]
    public EventCallback<FormSubmission> OnFormSubmit { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            FormioModule = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/Formio/js/formio-interop.js");
            await BuildForm();
        }
    }

    private async Task BuildForm()
    {
        var dotNetReference = DotNetObjectReference.Create(this);
        FormInstance = await FormioModule.InvokeAsync<IJSObjectReference>("createForm", formioElement, FormSchema, FormOptions, dotNetReference);
        
        await FormioModule.InvokeVoidAsync("setNoSubmit", FormInstance, "true");

        if (FormDefaultData != null)
        {
            await FormioModule.InvokeVoidAsync("setDefaultData", FormInstance, FormDefaultData);
        }
    }
    

    void LogNoSchema()
    {
        Console.WriteLine("No Form Schema found for Formio Render");
    }

    
    public async Task RebuildForm()
    {
        await CleanForm();
        await BuildForm();
    }
    
    
    async ValueTask CleanForm()
    {
        await FormInstance.DisposeAsync();
    }
    
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await CleanForm();
        await FormioModule.DisposeAsync();
    }
    
    [JSInvokable("SubmitEvent")]
    public async void SubmitFormEvent(FormSubmission submission)
    {
        await OnFormSubmit.InvokeAsync(submission);
        await FormioModule.InvokeVoidAsync("emitFormioEvent", FormInstance, "submitDone", submission);
    }
}

